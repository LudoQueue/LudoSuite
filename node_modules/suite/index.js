var game_socket = null,
	all_players,
	player_sockets = {},
	disconnect_message = "Sorry, the game has disconnected. Please reload the page later.";

exports.config_game = function(socket) {
	if(game_socket == null) {
		game_socket = socket;
		socket.on('disconnect', function() {
			game_socket = null;
			all_players.emit('err','Sorry, the game has disconnected. Please try again later');
		});
		
		socket.on('game_state_change', function(new_state) {
			all_players.emit('player_state',new_state);
		});
		
		socket.on('begin_race', function(new_state) {
			all_players.emit('race_start');
		});
		
		socket.on('player_in_game', function(data) {
			if(player_sockets.hasOwnProperty(data.id)) {
				player_sockets[data.id].emit('game_entered',data);
			}
			else {
				game_socket.emit('player_exit', data.id);
			}
		});
	}
	else {
		socket.emit('err', {message: 'A game already exists'});
	}
}

exports.config_player = function(config) {

	player_sockets[config.id] = config.socket;
	
	config.socket.on('enter', function(data) {
		check_game(config.socket,'Sorry, there is currently no game to connect to', function(){
			game_socket.emit('player_enter', {id: config.id, name: data});
		});
	});
	
	config.socket.on('tilt', function(data) {
		check_game(config.socket,disconnect_message, function(){
			game_socket.emit('player_tilt', {id: config.id, tilt: data});
		});
	});
	
	config.socket.on('tap', function() {
		check_game(config.socket,disconnect_message, function(){
			game_socket.emit('player_tap', config.id);
		});
	});
	
	config.socket.on('pulse', function() {
		check_game(config.socket,disconnect_message, function(){
			game_socket.emit('player_pulse', config.id);
		});
	});
	
	config.socket.on('disconnect', function() {
		if(game_socket != null ) {
			game_socket.emit('player_exit', config.id);
		}
		delete player_sockets[config.id];
	});
		
}

exports.set_all_players = function(sockets) {
	all_players = sockets;
}

function check_game(socket,data,callback) {
	if(game_socket == null) {
		socket.emit('err',data);
	}
	else {
		callback();
	}
}